/**
 * @file bsp_uart.h
 * @author Bi Kaixiang (wexhicy@gmail.com)
 * @brief   UART
 * @version 0.1
 * @date 2024-01-02
 *
 * @copyright Copyright (c) 2024
 *
 */

#ifndef BSP_USART_H
#define BSP_USART_H

#include "stdlib.h"
#include "usart.h"

#define USART_DEVICE_MAX_NUM 3    // ?????USART????
#define USART_RXBUFF_LIMIT   255u // ?????????buff,?????

// ??????,??????
typedef void (*usart_module_callback)();

/* ?????? */
typedef enum {
    USART_TRANSFER_NONE = 0,
    USART_TRANSFER_BLOCKING,
    USART_TRANSFER_IT,
    USART_TRANSFER_DMA,
} USART_TRANSFER_MODE_e;

// ???????,??module????????.
// ?????????????,?????????module???????????,??????id;?????????,???bsp??????module?????
typedef struct
{
    uint8_t recv_buff[USART_RXBUFF_LIMIT]; // ???????buff??,???????USART_RXBUFF_LIMIT
    uint8_t recv_buff_size;                // ???????????
    UART_HandleTypeDef *usart_handle;      // ?????usart_handle
    usart_module_callback module_callback; // ????????????
} USART_Instance;

// ??????????
typedef struct
{
    uint8_t recv_buff_size;                // ???????????
    UART_HandleTypeDef *usart_handle;      // ?????usart_handle
    usart_module_callback module_callback; // ????????????
} USART_Init_Config_s;

/**
 * @brief ??????,????????????????,?????DMA??,??????IT?BLOCKING??
 *
 * @todo ????????????????????,?????DMA??,??????IT?BLOCKING??
 *       ???????????extern,??module?????????
 *
 * @param _instance instance owned by module,?????????
 */
void USARTServiceInit(USART_Instance *_instance);

/**
 * @brief ????????,??????????
 *
 * @param init_config ??????????
 */
USART_Instance *USARTRegister(USART_Init_Config_s *init_config);

/**
 * @brief ???????????????,??????usart??,??buff????????
 * @note ????????????,???IT/DMA???????????????????.
 * @note ???????DMA/IT????,???USARTIsReady()??,??????module???????????.
 * @todo ?????USARTInstance??????????????
 *
 * @param _instance ????
 * @param send_buf ??????buffer
 * @param send_size how many bytes to send
 */
void USARTSend(USART_Instance *_instance, uint8_t *send_buf, uint16_t send_size, USART_TRANSFER_MODE_e mode);

/**
 * @brief ?????????,????????IT/DMA??
 *
 * @param _instance ????????
 * @return uint8_t ready 1, busy 0
 */
uint8_t USARTIsReady(USART_Instance *_instance);

#endif // BSP_USART_H